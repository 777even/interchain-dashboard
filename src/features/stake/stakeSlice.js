import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchValidators } from './stakingAPI';

const initialState = {
  validators: {
    status: 'idle',
    validators: [],
    errMsg: '',
    pagination: {},
  },
  delegations: {
    status: 'idle',
    delegations: [],
    errMsg: '',
    pagination: {},
  }
};

export const getValidators = createAsyncThunk(
  'stake/validators',
  async (data) => {
    const response = await fetchValidators(data.baseURL, data.key, data.limit, data.status);
    return response.data;
  }
);

export const getDelegations = createAsyncThunk(
  'stake/delegations',
  async (data) => {
    const response = await fetchValidators(data.baseURL,data.address, data.key, data.limit);
    return response.data;
  }
);

export const stakeSlice = createSlice({
  name: 'stake',
  initialState,
  reducers: {
    validators: (state, action) => {
      state.validators = action.payload
    },
    delegations: (state, action) => {
      state.delegations = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getValidators.pending, (state) => {
        state.validators.status = 'loading';
        state.validators.errMsg = ''

      })
      .addCase(getValidators.fulfilled, (state, action) => {
        let result = {}
        result.status = 'idle';
        result.validators = action.payload.validators;
        result.pagination = action.payload.pagination;
        result.errMsg = ''
        state.validators = result
      })
      .addCase(getValidators.rejected, (state, action) => {
        state.validators.status = 'rejected';
        state.validators.errMsg = action.error.message
      })

    
      builder
      .addCase(getDelegations.pending, (state) => {
        state.delegations.status = 'loading';
        state.delegations.errMsg = ''
      })
      .addCase(getDelegations.fulfilled, (state, action) => {
        state.delegations.status = 'idle';
        state.delegations.delegations = action.payload.delegations
        state.delegations.pagination = action.payload.pagination
        state.delegations.errMsg = ''
      })
      .addCase(getDelegations.rejected, (state, action) => {
        state.delegations.status = 'rejected';
        state.delegations.errMsg = action.error.message
      })

      
  },
});

export const { validators, delegations } = stakeSlice.actions;

export default stakeSlice.reducer;
